*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
1
      0     1     2     3
0  None     1     5  None
1  None  None    -3     5
2  None  None  None     2
3  None  None  None  None
Graph 1 haven t an absorbent cycle
Shortest path of the graph through Floyd-Warshall Algorithm
Initialization

Matrix L :
     0    1    2    3
0  0.0  1.0  5.0  inf
1  inf  0.0 -3.0  5.0
2  inf  inf  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2  None  None  None     2
3  None  None  None  None



Computing the shortest path
Step 1

Matrix L :
     0    1    2    3
0  0.0  1.0  5.0  inf
1  inf  0.0 -3.0  5.0
2  inf  inf  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2  None  None  None     2
3  None  None  None  None


Step 2

Matrix L :
     0    1    2    3
0  0.0  1.0 -2.0  0.0
1  inf  0.0 -3.0 -1.0
2  inf  inf  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0     0
1  None  None     1     1
2  None  None  None     2
3  None  None  None  None


Ended at step 2 with :

Matrix L :
     0    1    2    3
0  0.0  1.0 -2.0  0.0
1  inf  0.0 -3.0 -1.0
2  inf  inf  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0     0
1  None  None     1     1
2  None  None  None     2
3  None  None  None  None


Original L matrix :
     0    1    2    3
0  0.0  1.0  5.0  inf
1  inf  0.0 -3.0  5.0
2  inf  inf  0.0  2.0
3  inf  inf  inf  0.0

Original P matrix :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2  None  None  None     2
3  None  None  None  None


load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
2
      0     1     2     3
0  None     1     5  None
1  None  None     3     5
2  None  None  None     2
3  None  None  None  None
Graph 2 haven t an absorbent cycle
Shortest path of the graph through Floyd-Warshall Algorithm
Initialization

Matrix L :
     0    1    2    3
0  0.0  1.0  5.0  inf
1  inf  0.0  3.0  5.0
2  inf  inf  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2  None  None  None     2
3  None  None  None  None



Computing the shortest path
Step 1

Matrix L :
     0    1    2    3
0  0.0  1.0  5.0  inf
1  inf  0.0  3.0  5.0
2  inf  inf  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2  None  None  None     2
3  None  None  None  None


Step 2

Matrix L :
     0    1    2    3
0  0.0  1.0  4.0  6.0
1  inf  0.0  3.0  5.0
2  inf  inf  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0     0
1  None  None     1     1
2  None  None  None     2
3  None  None  None  None


Ended at step 2 with :

Matrix L :
     0    1    2    3
0  0.0  1.0  4.0  6.0
1  inf  0.0  3.0  5.0
2  inf  inf  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0     0
1  None  None     1     1
2  None  None  None     2
3  None  None  None  None


Original L matrix :
     0    1    2    3
0  0.0  1.0  5.0  inf
1  inf  0.0  3.0  5.0
2  inf  inf  0.0  2.0
3  inf  inf  inf  0.0

Original P matrix :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2  None  None  None     2
3  None  None  None  None


load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
3
      0     1     2     3
0  None     1    -5  None
1  None  None    -3     2
2  None     4  None     2
3  None  None  None  None
Graph 3 haven t an absorbent cycle
Shortest path of the graph through Floyd-Warshall Algorithm
Initialization

Matrix L :
     0    1    2    3
0  0.0  1.0 -5.0  inf
1  inf  0.0 -3.0  2.0
2  inf  4.0  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2  None     2  None     2
3  None  None  None  None



Computing the shortest path
Step 1

Matrix L :
     0    1    2    3
0  0.0  1.0 -5.0  inf
1  inf  0.0 -3.0  2.0
2  inf  4.0  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2  None     2  None     2
3  None  None  None  None


Step 2

Matrix L :
     0    1    2    3
0  0.0 -1.0 -5.0 -3.0
1  inf  0.0 -3.0 -1.0
2  inf  4.0  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0     0
1  None  None     1     1
2  None     2  None     2
3  None  None  None  None


Ended at step 2 with :

Matrix L :
     0    1    2    3
0  0.0 -1.0 -5.0 -3.0
1  inf  0.0 -3.0 -1.0
2  inf  4.0  0.0  2.0
3  inf  inf  inf  0.0

Matrix P :
      0     1     2     3
0  None     0     0     0
1  None  None     1     1
2  None     2  None     2
3  None  None  None  None


Original L matrix :
     0    1    2    3
0  0.0  1.0 -5.0  inf
1  inf  0.0 -3.0  2.0
2  inf  4.0  0.0  2.0
3  inf  inf  inf  0.0

Original P matrix :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2  None     2  None     2
3  None  None  None  None


load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
4
      0     1     2     3
0  None     1    -5  None
1  None  None    -3     2
2     6     4  None     2
3  None  None     2  None
Graph 4 haven t an absorbent cycle
Shortest path of the graph through Floyd-Warshall Algorithm
Initialization

Matrix L :
     0    1    2    3
0  0.0  1.0 -5.0  inf
1  inf  0.0 -3.0  2.0
2  6.0  4.0  0.0  2.0
3  inf  inf  2.0  0.0

Matrix P :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2     2     2  None     2
3  None  None     3  None



Computing the shortest path
Step 1

Matrix L :
     0    1    2    3
0  0.0  1.0 -5.0  inf
1  inf  0.0 -3.0  2.0
2  6.0  4.0  0.0  2.0
3  inf  inf  2.0  0.0

Matrix P :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2     2     2  None     2
3  None  None     3  None


Step 2

Matrix L :
     0    1    2    3
0  0.0 -1.0 -5.0 -3.0
1  3.0  0.0 -3.0 -1.0
2  6.0  4.0  0.0  2.0
3  8.0  6.0  2.0  0.0

Matrix P :
      0     1     2     3
0  None     0     0     0
1     1  None     1     1
2     2     2  None     2
3     3     3     3  None


Ended at step 2 with :

Matrix L :
     0    1    2    3
0  0.0 -1.0 -5.0 -3.0
1  3.0  0.0 -3.0 -1.0
2  6.0  4.0  0.0  2.0
3  8.0  6.0  2.0  0.0

Matrix P :
      0     1     2     3
0  None     0     0     0
1     1  None     1     1
2     2     2  None     2
3     3     3     3  None


Original L matrix :
     0    1    2    3
0  0.0  1.0 -5.0  inf
1  inf  0.0 -3.0  2.0
2  6.0  4.0  0.0  2.0
3  inf  inf  2.0  0.0

Original P matrix :
      0     1     2     3
0  None     0     0  None
1  None  None     1     1
2     2     2  None     2
3  None  None     3  None


load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
5
      0     1     2     3
0  None     1    -5  None
1  None    -1    -3     2
2     6     4  None     2
3  None  None     2  None
Graph 5 have an absorbent cycle

load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
6
      0     1     2     3     4     5     6
0  None     2    -5  None  None  None  None
1  None     3    -3     3  None  None  None
2     7     4  None     3  None  None  None
3  None  None     2  None  None  None  None
4  None  None  None  None  None     5  None
5  None  None  None  None     2     0    -2
6  None  None  None  None  None  None  None
Graph 6 haven t an absorbent cycle
Shortest path of the graph through Floyd-Warshall Algorithm
Initialization

Matrix L :
     0    1    2    3    4    5    6
0  0.0  2.0 -5.0  inf  inf  inf  inf
1  inf  0.0 -3.0  3.0  inf  inf  inf
2  7.0  4.0  0.0  3.0  inf  inf  inf
3  inf  inf  2.0  0.0  inf  inf  inf
4  inf  inf  inf  inf  0.0  5.0  inf
5  inf  inf  inf  inf  2.0  0.0 -2.0
6  inf  inf  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4     5     6
0  None     0     0  None  None  None  None
1  None     1     1     1  None  None  None
2     2     2  None     2  None  None  None
3  None  None     3  None  None  None  None
4  None  None  None  None  None     4  None
5  None  None  None  None     5     5     5
6  None  None  None  None  None  None  None



Computing the shortest path
Step 1

Matrix L :
     0    1    2    3    4    5    6
0  0.0  2.0 -5.0  inf  inf  inf  inf
1  inf  0.0 -3.0  3.0  inf  inf  inf
2  7.0  4.0  0.0  3.0  inf  inf  inf
3  inf  inf  2.0  0.0  inf  inf  inf
4  inf  inf  inf  inf  0.0  5.0  inf
5  inf  inf  inf  inf  2.0  0.0 -2.0
6  inf  inf  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4     5     6
0  None     0     0  None  None  None  None
1  None     1     1     1  None  None  None
2     2     2  None     2  None  None  None
3  None  None     3  None  None  None  None
4  None  None  None  None  None     4  None
5  None  None  None  None     5     5     5
6  None  None  None  None  None  None  None


Step 2

Matrix L :
     0    1    2    3    4    5    6
0  0.0 -1.0 -5.0 -2.0  inf  inf  inf
1  4.0  0.0 -3.0  0.0  inf  inf  inf
2  7.0  4.0  0.0  3.0  inf  inf  inf
3  9.0  6.0  2.0  0.0  inf  inf  inf
4  inf  inf  inf  inf  0.0  5.0  3.0
5  inf  inf  inf  inf  2.0  0.0 -2.0
6  inf  inf  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4     5     6
0  None     0     0     0  None  None  None
1     1     1     1     1  None  None  None
2     2     2  None     2  None  None  None
3     3     3     3  None  None  None  None
4  None  None  None  None  None     4     4
5  None  None  None  None     5     5     5
6  None  None  None  None  None  None  None


Ended at step 2 with :

Matrix L :
     0    1    2    3    4    5    6
0  0.0 -1.0 -5.0 -2.0  inf  inf  inf
1  4.0  0.0 -3.0  0.0  inf  inf  inf
2  7.0  4.0  0.0  3.0  inf  inf  inf
3  9.0  6.0  2.0  0.0  inf  inf  inf
4  inf  inf  inf  inf  0.0  5.0  3.0
5  inf  inf  inf  inf  2.0  0.0 -2.0
6  inf  inf  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4     5     6
0  None     0     0     0  None  None  None
1     1     1     1     1  None  None  None
2     2     2  None     2  None  None  None
3     3     3     3  None  None  None  None
4  None  None  None  None  None     4     4
5  None  None  None  None     5     5     5
6  None  None  None  None  None  None  None


Original L matrix :
     0    1    2    3    4    5    6
0  0.0  2.0 -5.0  inf  inf  inf  inf
1  inf  0.0 -3.0  3.0  inf  inf  inf
2  7.0  4.0  0.0  3.0  inf  inf  inf
3  inf  inf  2.0  0.0  inf  inf  inf
4  inf  inf  inf  inf  0.0  5.0  inf
5  inf  inf  inf  inf  2.0  0.0 -2.0
6  inf  inf  inf  inf  inf  inf  0.0

Original P matrix :
      0     1     2     3     4     5     6
0  None     0     0  None  None  None  None
1  None     1     1     1  None  None  None
2     2     2  None     2  None  None  None
3  None  None     3  None  None  None  None
4  None  None  None  None  None     4  None
5  None  None  None  None     5     5     5
6  None  None  None  None  None  None  None


load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
7
      0     1     2     3     4
0  None     1     2     1  None
1  None  None  None  None     3
2  None  None  None     1     1
3  None  None  None  None     4
4  None  None  None  None  None
Graph 7 haven t an absorbent cycle
Shortest path of the graph through Floyd-Warshall Algorithm
Initialization

Matrix L :
     0    1    2    3    4
0  0.0  1.0  2.0  1.0  inf
1  inf  0.0  inf  inf  3.0
2  inf  inf  0.0  1.0  1.0
3  inf  inf  inf  0.0  4.0
4  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4
0  None     0     0     0  None
1  None  None  None  None     1
2  None  None  None     2     2
3  None  None  None  None     3
4  None  None  None  None  None



Computing the shortest path
Step 1

Matrix L :
     0    1    2    3    4
0  0.0  1.0  2.0  1.0  inf
1  inf  0.0  inf  inf  3.0
2  inf  inf  0.0  1.0  1.0
3  inf  inf  inf  0.0  4.0
4  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4
0  None     0     0     0  None
1  None  None  None  None     1
2  None  None  None     2     2
3  None  None  None  None     3
4  None  None  None  None  None


Step 2

Matrix L :
     0    1    2    3    4
0  0.0  1.0  2.0  1.0  3.0
1  inf  0.0  inf  inf  3.0
2  inf  inf  0.0  1.0  1.0
3  inf  inf  inf  0.0  4.0
4  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4
0  None     0     0     0     0
1  None  None  None  None     1
2  None  None  None     2     2
3  None  None  None  None     3
4  None  None  None  None  None


Ended at step 2 with :

Matrix L :
     0    1    2    3    4
0  0.0  1.0  2.0  1.0  3.0
1  inf  0.0  inf  inf  3.0
2  inf  inf  0.0  1.0  1.0
3  inf  inf  inf  0.0  4.0
4  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4
0  None     0     0     0     0
1  None  None  None  None     1
2  None  None  None     2     2
3  None  None  None  None     3
4  None  None  None  None  None


Original L matrix :
     0    1    2    3    4
0  0.0  1.0  2.0  1.0  inf
1  inf  0.0  inf  inf  3.0
2  inf  inf  0.0  1.0  1.0
3  inf  inf  inf  0.0  4.0
4  inf  inf  inf  inf  0.0

Original P matrix :
      0     1     2     3     4
0  None     0     0     0  None
1  None  None  None  None     1
2  None  None  None     2     2
3  None  None  None  None     3
4  None  None  None  None  None


load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
8
      0     1     2     3     4
0  None     1  None  None  None
1  None  None     2  None  None
2  None  None  None     3  None
3  None  None  None  None    -6
4     0  None  None  None  None
Graph 8 haven t an absorbent cycle
Shortest path of the graph through Floyd-Warshall Algorithm
Initialization

Matrix L :
     0    1    2    3    4
0  0.0  1.0  inf  inf  inf
1  inf  0.0  2.0  inf  inf
2  inf  inf  0.0  3.0  inf
3  inf  inf  inf  0.0 -6.0
4  0.0  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4
0  None     0  None  None  None
1  None  None     1  None  None
2  None  None  None     2  None
3  None  None  None  None     3
4     4  None  None  None  None



Computing the shortest path
Step 1

Matrix L :
     0    1    2    3    4
0  0.0  1.0  inf  inf  inf
1  inf  0.0  2.0  inf  inf
2  inf  inf  0.0  3.0  inf
3  inf  inf  inf  0.0 -6.0
4  0.0  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4
0  None     0  None  None  None
1  None  None     1  None  None
2  None  None  None     2  None
3  None  None  None  None     3
4     4  None  None  None  None


Step 2

Matrix L :
     0    1    2    3    4
0  0.0  1.0  3.0  6.0  0.0
1 -1.0  0.0  2.0  5.0 -1.0
2 -3.0 -2.0  0.0  3.0 -3.0
3 -6.0 -5.0 -3.0  0.0 -6.0
4  0.0  1.0  3.0  6.0  0.0

Matrix P :
      0     1     2     3     4
0  None     0     0     0     0
1     1  None     1     1     1
2     2     2  None     2     2
3     3     3     3  None     3
4     4     4     4     4  None


Ended at step 2 with :

Matrix L :
     0    1    2    3    4
0  0.0  1.0  3.0  6.0  0.0
1 -1.0  0.0  2.0  5.0 -1.0
2 -3.0 -2.0  0.0  3.0 -3.0
3 -6.0 -5.0 -3.0  0.0 -6.0
4  0.0  1.0  3.0  6.0  0.0

Matrix P :
      0     1     2     3     4
0  None     0     0     0     0
1     1  None     1     1     1
2     2     2  None     2     2
3     3     3     3  None     3
4     4     4     4     4  None


Original L matrix :
     0    1    2    3    4
0  0.0  1.0  inf  inf  inf
1  inf  0.0  2.0  inf  inf
2  inf  inf  0.0  3.0  inf
3  inf  inf  inf  0.0 -6.0
4  0.0  inf  inf  inf  0.0

Original P matrix :
      0     1     2     3     4
0  None     0  None  None  None
1  None  None     1  None  None
2  None  None  None     2  None
3  None  None  None  None     3
4     4  None  None  None  None


load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
9
      0     1     2     3
0  None     1    -5  None
1  None  None    -3     2
2  None    -1  None     2
3  None  None  None  None
Graph 9 have an absorbent cycle

load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
10
      0     1     2     3     4     5     6     7
0  None  None     2     1  None  None  None  None
1     1  None  None  None     1  None  None  None
2  None  None  None    -2  None  None  None  None
3  None  None     7  None     4  None  None  None
4  None     3    -1  None  None  None  None  None
5  None  None  None  None  None  None     2  None
6  None  None  None  None  None    -2  None    -2
7  None  None  None  None  None  None  None  None
Graph 10 haven t an absorbent cycle
Shortest path of the graph through Floyd-Warshall Algorithm
Initialization

Matrix L :
     0    1    2    3    4    5    6    7
0  0.0  inf  2.0  1.0  inf  inf  inf  inf
1  1.0  0.0  inf  inf  1.0  inf  inf  inf
2  inf  inf  0.0 -2.0  inf  inf  inf  inf
3  inf  inf  7.0  0.0  4.0  inf  inf  inf
4  inf  3.0 -1.0  inf  0.0  inf  inf  inf
5  inf  inf  inf  inf  inf  0.0  2.0  inf
6  inf  inf  inf  inf  inf -2.0  0.0 -2.0
7  inf  inf  inf  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4     5     6     7
0  None  None     0     0  None  None  None  None
1     1  None  None  None     1  None  None  None
2  None  None  None     2  None  None  None  None
3  None  None     3  None     3  None  None  None
4  None     4     4  None  None  None  None  None
5  None  None  None  None  None  None     5  None
6  None  None  None  None  None     6  None     6
7  None  None  None  None  None  None  None  None



Computing the shortest path
Step 1

Matrix L :
     0    1    2    3    4    5    6    7
0  0.0  inf  2.0  1.0  inf  inf  inf  inf
1  1.0  0.0  inf  inf  1.0  inf  inf  inf
2  inf  inf  0.0 -2.0  inf  inf  inf  inf
3  inf  inf  7.0  0.0  4.0  inf  inf  inf
4  inf  3.0 -1.0  inf  0.0  inf  inf  inf
5  inf  inf  inf  inf  inf  0.0  2.0  inf
6  inf  inf  inf  inf  inf -2.0  0.0 -2.0
7  inf  inf  inf  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4     5     6     7
0  None  None     0     0  None  None  None  None
1     1  None  None  None     1  None  None  None
2  None  None  None     2  None  None  None  None
3  None  None     3  None     3  None  None  None
4  None     4     4  None  None  None  None  None
5  None  None  None  None  None  None     5  None
6  None  None  None  None  None     6  None     6
7  None  None  None  None  None  None  None  None


Step 2

Matrix L :
     0    1    2    3    4    5    6    7
0  0.0  7.0  2.0  0.0  4.0  inf  inf  inf
1  1.0  0.0  0.0 -2.0  1.0  inf  inf  inf
2  6.0  5.0  0.0 -2.0  2.0  inf  inf  inf
3  8.0  7.0  3.0  0.0  4.0  inf  inf  inf
4  4.0  3.0 -1.0 -3.0  0.0  inf  inf  inf
5  inf  inf  inf  inf  inf  0.0  2.0  0.0
6  inf  inf  inf  inf  inf -2.0  0.0 -2.0
7  inf  inf  inf  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4     5     6     7
0  None     0     0     0     0  None  None  None
1     1  None     1     1     1  None  None  None
2     2     2  None     2     2  None  None  None
3     3     3     3  None     3  None  None  None
4     4     4     4     4  None  None  None  None
5  None  None  None  None  None  None     5     5
6  None  None  None  None  None     6  None     6
7  None  None  None  None  None  None  None  None


Ended at step 2 with :

Matrix L :
     0    1    2    3    4    5    6    7
0  0.0  7.0  2.0  0.0  4.0  inf  inf  inf
1  1.0  0.0  0.0 -2.0  1.0  inf  inf  inf
2  6.0  5.0  0.0 -2.0  2.0  inf  inf  inf
3  8.0  7.0  3.0  0.0  4.0  inf  inf  inf
4  4.0  3.0 -1.0 -3.0  0.0  inf  inf  inf
5  inf  inf  inf  inf  inf  0.0  2.0  0.0
6  inf  inf  inf  inf  inf -2.0  0.0 -2.0
7  inf  inf  inf  inf  inf  inf  inf  0.0

Matrix P :
      0     1     2     3     4     5     6     7
0  None     0     0     0     0  None  None  None
1     1  None     1     1     1  None  None  None
2     2     2  None     2     2  None  None  None
3     3     3     3  None     3  None  None  None
4     4     4     4     4  None  None  None  None
5  None  None  None  None  None  None     5     5
6  None  None  None  None  None     6  None     6
7  None  None  None  None  None  None  None  None


Original L matrix :
     0    1    2    3    4    5    6    7
0  0.0  inf  2.0  1.0  inf  inf  inf  inf
1  1.0  0.0  inf  inf  1.0  inf  inf  inf
2  inf  inf  0.0 -2.0  inf  inf  inf  inf
3  inf  inf  7.0  0.0  4.0  inf  inf  inf
4  inf  3.0 -1.0  inf  0.0  inf  inf  inf
5  inf  inf  inf  inf  inf  0.0  2.0  inf
6  inf  inf  inf  inf  inf -2.0  0.0 -2.0
7  inf  inf  inf  inf  inf  inf  inf  0.0

Original P matrix :
      0     1     2     3     4     5     6     7
0  None  None     0     0  None  None  None  None
1     1  None  None  None     1  None  None  None
2  None  None  None     2  None  None  None  None
3  None  None     3  None     3  None  None  None
4  None     4     4  None  None  None  None  None
5  None  None  None  None  None  None     5  None
6  None  None  None  None  None     6  None     6
7  None  None  None  None  None  None  None  None


load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
11
      0     1     2     3     4
0  None  None     2     1  None
1     1     2  None  None  None
2  None  None  None    -2  None
3  None  None  None  None     4
4  None     3    -1  None  None
Graph 11 haven t an absorbent cycle
Shortest path of the graph through Floyd-Warshall Algorithm
Initialization

Matrix L :
     0    1    2    3    4
0  0.0  inf  2.0  1.0  inf
1  1.0  0.0  inf  inf  inf
2  inf  inf  0.0 -2.0  inf
3  inf  inf  inf  0.0  4.0
4  inf  3.0 -1.0  inf  0.0

Matrix P :
      0     1     2     3     4
0  None  None     0     0  None
1     1     1  None  None  None
2  None  None  None     2  None
3  None  None  None  None     3
4  None     4     4  None  None



Computing the shortest path
Step 1

Matrix L :
     0    1    2    3    4
0  0.0  inf  2.0  1.0  inf
1  1.0  0.0  inf  inf  inf
2  inf  inf  0.0 -2.0  inf
3  inf  inf  inf  0.0  4.0
4  inf  3.0 -1.0  inf  0.0

Matrix P :
      0     1     2     3     4
0  None  None     0     0  None
1     1     1  None  None  None
2  None  None  None     2  None
3  None  None  None  None     3
4  None     4     4  None  None


Step 2

Matrix L :
     0    1    2    3    4
0  0.0  7.0  2.0  0.0  4.0
1  1.0  0.0  3.0  1.0  5.0
2  6.0  5.0  0.0 -2.0  2.0
3  8.0  7.0  3.0  0.0  4.0
4  4.0  3.0 -1.0 -3.0  0.0

Matrix P :
      0  1     2     3     4
0  None  0     0     0     0
1     1  1     1     1     1
2     2  2  None     2     2
3     3  3     3  None     3
4     4  4     4     4  None


Ended at step 2 with :

Matrix L :
     0    1    2    3    4
0  0.0  7.0  2.0  0.0  4.0
1  1.0  0.0  3.0  1.0  5.0
2  6.0  5.0  0.0 -2.0  2.0
3  8.0  7.0  3.0  0.0  4.0
4  4.0  3.0 -1.0 -3.0  0.0

Matrix P :
      0  1     2     3     4
0  None  0     0     0     0
1     1  1     1     1     1
2     2  2  None     2     2
3     3  3     3  None     3
4     4  4     4     4  None


Original L matrix :
     0    1    2    3    4
0  0.0  inf  2.0  1.0  inf
1  1.0  0.0  inf  inf  inf
2  inf  inf  0.0 -2.0  inf
3  inf  inf  inf  0.0  4.0
4  inf  3.0 -1.0  inf  0.0

Original P matrix :
      0     1     2     3     4
0  None  None     0     0  None
1     1     1  None  None  None
2  None  None  None     2  None
3  None  None  None  None     3
4  None     4     4  None  None


load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
12
      0     1     2     3     4
0  None     1     2     1  None
1  None     2  None  None  None
2  None  None  None    -2     1
3  None  None  None  None     4
4  None     3  None  None  None
Graph 12 haven t an absorbent cycle
Shortest path of the graph through Floyd-Warshall Algorithm
Initialization

Matrix L :
     0    1    2    3    4
0  0.0  1.0  2.0  1.0  inf
1  inf  0.0  inf  inf  inf
2  inf  inf  0.0 -2.0  1.0
3  inf  inf  inf  0.0  4.0
4  inf  3.0  inf  inf  0.0

Matrix P :
      0     1     2     3     4
0  None     0     0     0  None
1  None     1  None  None  None
2  None  None  None     2     2
3  None  None  None  None     3
4  None     4  None  None  None



Computing the shortest path
Step 1

Matrix L :
     0    1    2    3    4
0  0.0  1.0  2.0  1.0  inf
1  inf  0.0  inf  inf  inf
2  inf  inf  0.0 -2.0  1.0
3  inf  inf  inf  0.0  4.0
4  inf  3.0  inf  inf  0.0

Matrix P :
      0     1     2     3     4
0  None     0     0     0  None
1  None     1  None  None  None
2  None  None  None     2     2
3  None  None  None  None     3
4  None     4  None  None  None


Step 2

Matrix L :
     0    1    2    3    4
0  0.0  1.0  2.0  0.0  3.0
1  inf  0.0  inf  inf  inf
2  inf  4.0  0.0 -2.0  1.0
3  inf  7.0  inf  0.0  4.0
4  inf  3.0  inf  inf  0.0

Matrix P :
      0  1     2     3     4
0  None  0     0     0     0
1  None  1  None  None  None
2  None  2  None     2     2
3  None  3  None  None     3
4  None  4  None  None  None


Ended at step 2 with :

Matrix L :
     0    1    2    3    4
0  0.0  1.0  2.0  0.0  3.0
1  inf  0.0  inf  inf  inf
2  inf  4.0  0.0 -2.0  1.0
3  inf  7.0  inf  0.0  4.0
4  inf  3.0  inf  inf  0.0

Matrix P :
      0  1     2     3     4
0  None  0     0     0     0
1  None  1  None  None  None
2  None  2  None     2     2
3  None  3  None  None     3
4  None  4  None  None  None


Original L matrix :
     0    1    2    3    4
0  0.0  1.0  2.0  1.0  inf
1  inf  0.0  inf  inf  inf
2  inf  inf  0.0 -2.0  1.0
3  inf  inf  inf  0.0  4.0
4  inf  3.0  inf  inf  0.0

Original P matrix :
      0     1     2     3     4
0  None     0     0     0  None
1  None     1  None  None  None
2  None  None  None     2     2
3  None  None  None  None     3
4  None     4  None  None  None


load another graph ? (y/n) : y

*--------------------------------------------------------*
|Search for shortest paths using Floyd-Warshall algorithm|
|a tdz program                                           |
*--------------------------------------------------------*
please select a graph (enter -1 to load a graph which isn't in the following list)
	1 - graph01.txt
	2 - graph02.txt
	3 - graph03.txt
	4 - graph04.txt
	5 - graph05.txt
	6 - graph06.txt
	7 - graph07.txt
	8 - graph08.txt
	9 - graph09.txt
	10 - graph10.txt
	11 - graph11.txt
	12 - graph12.txt
	13 - graph13.txt
13
      0     1     2     3     4     5     6     7
0  None  None     2     1  None  None  None  None
1     1  None  None  None     1  None  None  None
2  None  None  None    -2  None  None  None  None
3  None  None     7  None     4  None  None  None
4  None     3    -1  None  None  None  None  None
5  None  None  None  None  None  None     1  None
6  None  None  None  None  None    -2  None    -2
7  None  None  None  None  None  None  None  None
Graph 13 have an absorbent cycle

load another graph ? (y/n) :